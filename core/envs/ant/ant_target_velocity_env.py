from typing import Tuple

import numpy as np

import gym
from gym.utils import EzPickle

from core.envs.base_meta_env import BaseMetaEnv
from core.envs.ant.base_ant_env import BaseAntEnv


class AntVelEnv(BaseAntEnv, EzPickle, BaseMetaEnv):
    def __init__(
        self,
        max_episode_steps: int,
        low: float = 0.0,
        high: float = 3.0,
        seed: int = None,
    ):
        """
        Ant environment with target velocity, as described in [1].

        The code is adapted from https://github.com/cbfinn/maml_rl

        The ant follows the dynamics from MuJoCo [2], and receives at each time step a reward composed of a control cost,
        a contact cost, a survival reward, and a penalty equal to the difference between its current velocity  and the target
        velocity.

        The tasks are generated by sampling the target velocities from the uniform distribution on [0, 3].

        [1] Chelsea Finn, Pieter Abbeel, Sergey Levine, "Model-Agnostic Meta-Learning for Fast Adaptation of Deep
            Networks", 2017 (https://arxiv.org/abs/1703.03400)
        [2] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for model-based control", 2012
            (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)

        Args:
            max_episode_steps (int): Maximum number of steps per episode.
            low ():
            high ():
            seed (int): Random seed.
        """
        EzPickle.__init__(self)
        BaseMetaEnv.__init__(self, seed)
        BaseAntEnv.__init__(self)

        self._max_episode_steps = max_episode_steps
        self._elapsed_steps = 0

        self.low = low
        self.high = high

        self._target_velocity = None
        self._action_scaling = None

        self.sample_task()

    def get_spaces(self) -> Tuple[gym.Space, gym.Space]:
        """
        Returns the action space

        Returns:
          Tuple[gym.Space, gym.Space]
        """
        return self.observation_space, self.action_space

    def step(self, action: np.ndarray) -> Tuple:
        """
        Take a step in the environment and return the corresponding observation, action, reward,
        additional info, etc.

        Args:
          action (np.ndarray): Action to be taken in the environment.

        Returns:
          Tuple
        """
        xposbefore = self.get_body_com("torso")[0]
        self.do_simulation(action, self.frame_skip)
        xposafter = self.get_body_com("torso")[0]

        forward_vel = (xposafter - xposbefore) / self.dt
        forward_reward = -1.0 * np.abs(forward_vel - self._target_velocity) + 1.0
        survive_reward = 0.05

        ctrl_cost = 0.5 * 1e-2 * np.sum(np.square(action / self.action_scaling))
        contact_cost = (
            0.5 * 1e-3 * np.sum(np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))
        )

        observation = self._get_obs()
        reward = forward_reward - ctrl_cost - contact_cost + survive_reward
        state = self.state_vector()

        not_done = np.isfinite(state).all() and 0.2 <= state[2] <= 1.0

        done = not not_done

        infos = dict(
            reward_forward=forward_reward,
            reward_ctrl=-ctrl_cost,
            reward_contact=-contact_cost,
            reward_survive=survive_reward,
            task=self._task,
        )

        return observation, reward, done, infos

    def sample_task(self):
        """
        Sample a new target velocity.

        Returns:
          None
        """
        self._target_velocity = self.np_random.uniform(self.low, self.high, size=1)
        self._elapsed_steps = 0
        pass
