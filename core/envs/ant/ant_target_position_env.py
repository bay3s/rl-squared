import numpy as np
from core.envs.ant.base_ant_env import BaseAntEnv


class AntPosEnv(BaseAntEnv):
    """Ant environment with target position. The code is adapted from
    https://github.com/cbfinn/maml_rl/blob/9c8e2ebd741cb0c7b8bf2d040c4caeeb8e06cc95/rllab/envs/mujoco/ant_env_rand_goal.py

    The ant follows the dynamics from MuJoCo [1], and receives at each
    time step a reward composed of a control cost, a contact cost, a survival
    reward, and a penalty equal to its L1 distance to the target position. The
    tasks are generated by sampling the target positions from the uniform
    distribution on [-3, 3]^2.

    [1] Emanuel Todorov, Tom Erez, Yuval Tassa, "MuJoCo: A physics engine for
        model-based control", 2012
        (https://homes.cs.washington.edu/~todorov/papers/TodorovIROS12.pdf)
    """

    def __init__(self, task={}, low=-3.0, high=3.0):
        self._task = task
        self.low = low
        self.high = high

        self._goal_pos = task.get("position", np.zeros((2,), dtype=np.float32))
        self._action_scaling = None
        super(AntPosEnv, self).__init__()

    def step(self, action):
        self.do_simulation(action, self.frame_skip)
        xyposafter = self.get_body_com("torso")[:2]

        goal_reward = -np.sum(np.abs(xyposafter - self._goal_pos)) + 4.0
        survive_reward = 0.05

        ctrl_cost = 0.5 * 1e-2 * np.sum(np.square(action / self.action_scaling))
        contact_cost = (
            0.5 * 1e-3 * np.sum(np.square(np.clip(self.sim.data.cfrc_ext, -1, 1)))
        )

        observation = self._get_obs()
        reward = goal_reward - ctrl_cost - contact_cost + survive_reward
        state = self.state_vector()
        notdone = np.isfinite(state).all() and state[2] >= 0.2 and state[2] <= 1.0
        done = not notdone
        infos = dict(
            reward_goal=goal_reward,
            reward_ctrl=-ctrl_cost,
            reward_contact=-contact_cost,
            reward_survive=survive_reward,
            task=self._task,
        )
        return (observation, reward, done, infos)

    def sample_tasks(self, num_tasks):
        positions = self.np_random.uniform(self.low, self.high, size=(num_tasks, 2))
        tasks = [{"position": position} for position in positions]
        return tasks

    def reset_task(self, task):
        self._task = task
        self._goal_pos = task["position"]
